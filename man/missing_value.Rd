% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dots.R
\name{missing_value}
\alias{missing_value}
\title{R's missing value.}
\usage{
missing_value(n)
}
\arguments{
\item{n}{Optional; a number. If provided, will return a list of
missing values with this many elements.}
}
\value{
A symbol with empty name, or a list of such.
}
\description{
The missing constant (\code{R_MissingArg} at C level) has two related
uses. One is "at parse time" when it is used to represent empty
arguments. The other is "at run time" when it is bound to function
arguments that were not given any value.
}
\details{
Manipulating expressions ("computing on the language") means we
have to deal with the first use case, because we have to be able to
make expressions that have empty arguments, like the first index in
\code{arr[,c]}.

The second use of the missing sigil makes this tricky. Generally it
is a bad idea to assign a bare \code{missing_value} to a variable or use
one as the argument to a function, because this makes R think that
the variable \b{is} missing rather than that it \b{contains a}
missing. For instance, you can say

x <- list(missing_value(), 2, 3)

and get a valid list, but this:

a <- missing_value(); b <- 2; c <- 3
x <- list(a, b, c)

fails with an error about the missing variable "a". When dealing
with missing values, then, best to keep them wrapped up in lists ,
quotations
}
\examples{
# These expressions are equivalent:
quote(function(x, y=1) x+y)
call("function", pairlist(x=missing_value(), y=1), call("+", as.name("x"), as.name("y"))

# These expressions are also equivalent:
quote(df[,1])
substitute(df[row,col], list(row = missing_value(), col = 1))
}
\seealso{
list_missing
}
