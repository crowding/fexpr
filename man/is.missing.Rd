% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dots.R
\name{list_missing}
\alias{list_missing}
\alias{is.missing}
\title{Check if list items are equal to the "missing value."}
\usage{
list_missing(...)

is.missing(x)
}
\arguments{
\item{x}{If given a list, compares each element with the missing
value. Given a \code{\link{dots}} object, determines whether each
element is missing. If the argument is a missing variable,
returns scalar TRUE}
}
\value{
A list containing the values of all arguments, including
  missing values. That is, \code{list_missing} works like
  \code{list}, but does not complain about missing arguments,
  instead representing them directly.

For \code{is.missing}, a vector of boolean values.
}
\description{
For \code{\dots} objects as made by \code{\link{dots}}, checks if
the expressions are missing.
}
\details{
Checking for missing elements of ... without forcing by index is
important, for example in implementing array subsetting like
\code{`[`}. where a missing argument means to take all indexes on
that dimension.

However there is not a good way to replicate
\code{`[`}'s behavior in base R; using \code{list(\dots)} to
collect all positional arguments will throw errors on missing
arguments. Instead, use \code{x <- list_missing(...)} and
\link{is.missing}(x) to detect missing arguments.
}
\note{
A frequently seen strategy is to use
  \code{\link{match.call}(expand.dots=TRUE)} and
  \code{\link{eval}(..., parent.frame())} to screen for missing
  arguments while evaluating non-missing arguments. This is not
  recommended because \link{match.call} does not capture the
  environments of the arguments, leading to hygeine violations.
}
\seealso{
missing_value
}
