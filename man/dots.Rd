% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dots.R
\name{dots}
\alias{dots}
\alias{dots_}
\alias{exprs}
\alias{exprs.dots}
\alias{dots_exprs}
\alias{exprs<-}
\alias{envs}
\alias{envs.dots}
\alias{envs<-}
\alias{dots_envs}
\alias{dots_names}
\alias{envs<-.dots}
\title{Capture a number of unevaluated arguments as an object.}
\usage{
dots(...)

dots_(exprs, envs)

exprs(x)

\method{exprs}{dots}(d)

dots_exprs(...)

exprs(x) <- value

envs(x)

\method{envs}{dots}(x)

envs(x) <- value

dots_envs(...)

dots_names(...)

\method{envs}{dots}(x) <- value
}
\arguments{
\item{...}{Any number of arguments.}

\item{exprs}{An expression or list of expressions.}

\item{envs}{An environment or list of environments.}

\item{x}{A dots object (see \code{\link{dots}}).}

\item{value}{A list of expressions.}

\item{x}{a \code{[dots]} object.}

\item{value}{A replacement list.}
}
\value{
A list with class 'dots', each element of which is a \link{quotation}.

\code{dots_(exprs, envs)} directly constructs a dots object
given lists of expresions and environments.

A named list of expressions. The mutator \code{exprs<-}
returns a new dots object with the new expressions.

\code{dots_exprs(...)} is a shorthand for \code{exprs(dots(...))}.

\code{envs(dots(...)} extracts a list of environments from a
\code{[dots]} object.

\code{envs(x)} returns a list of the environments of each
quotation in x.

\code{envs<-} returns a list of new quotations with updated
environments.

\code{dots_exprs(...)} is a shorthand for \code{exprs(dots(...))}

\code{dots_names(...)} is a shorthand for \code{names(dots(...))}

\code{envs<-} returns a list of new quotations with updated
expressions.
}
\description{
A dots object represents a named list of quotations. It mirrors R's
special variable \code{...}. Unlike \code{...}, a \code{dots} is:
\itemize{
\item immutable (evaluating does not change it),
\item first-class (you can give it any name, not just \code{...}),
\item data (The R interpreter treates it as literal data rather than
triggering argument splicing).
}

\code{exprs(dots(...))} extracts a list of expressions, one per element
of a \code{\link{dots}} object.
}
\details{
\code{d <- dots(...)} captures the contents of \code{...} without triggering
evaluation, and returns a list of class \code{"dots"}, each element of
which is a \code{[quotation]}. This improves on
\code{substitute(list(...))[[2]]} by capturing the context of each
expression along with the expressions.

\code{d <- dots(foo, quux=bar+baz)} captures all of the given arguments
in a dots object, like \code{[alist]}, but also captures the
environment of each argument (The present environment in this case).

[[2]: R:[2
[alist]: R:alist
}
\examples{

named.list <- function(...) {
 # Collect only named arguments, ignoring unnamed arguments.
 d <- dots(...)
 do(list, d[names(d) != ""])
}

named.list(a=1, b=2*2, stop("this is not evaluated"))
}
