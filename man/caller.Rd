% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/caller.R
\name{caller}
\alias{caller}
\title{Get the calling environment of a given environment.}
\usage{
caller(env = caller(environment()),
  ifnotfound = stop("caller: environment not found on stack"))
}
\arguments{
\item{env}{The environment whose caller to determine. By default,
the environment from which \code{caller} itself was called. (That
is, \code{caller()} should return the the same value as
\code{caller(environment())}.)}

\item{ifnotfound}{What do return in case the caller cannot be
determined.}
}
\value{
The environment which called \code{env} into being. If that
environment cannot be determined, \code{ifnotfound} is returned.

For example, in the code:\preformatted{  X <- environment()
  F <- function() {
    Y <- environment()
    caller(Y)
  }
  F()
}

the environment called "Y" was created by calling F(), and that
call occurs in the environment called "X". In this case X is the
calling environment of Y, so \code{F()} returns the same environment
as \code{X()}.

\code{caller} is intended as a replacement for \link{parent.frame}, which
returns the next environment up the calling stack -- which is
sometimes the same value, but differs in some cases (e.g. when
lazy evaluation re-activates an environment.) So \code{parent.frame()}
can return different things depending on the order in which
arguments are evaluated.

In addition, \code{caller} tries to do the right thing when the
environment was instantiated by means \code{do.call}, \link{eval} or \link{do}.
}
\description{
Get the calling environment of a given environment.
}
\examples{
E <- environment()
F <- function()
{
 Y <- environment()
 caller(Y)
 }
identical(F(), E) ## TRUE
}
