% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quo.R
\name{quo}
\alias{quo}
\alias{quo_}
\alias{env}
\alias{expr}
\alias{expr.quotation}
\alias{value.quotation}
\title{Capture or construct a quotation.}
\usage{
quo(x, env = arg_env_(quote(x), environment()), force = FALSE)

quo_(expr, env, force = FALSE)

env(x)

expr(q)

\method{expr}{quotation}(q)

\method{value}{quotation}(q)
}
\arguments{
\item{x}{an argument, left unevaluated.}

\item{env}{An environment.}

\item{force}{Create a "forced" quotation; this is one that stores
an expression and value but no environment.}

\item{expr}{An expression.}

\item{q}{A quotation object.}
}
\value{
an object of class "quotation".

\code{expr(q)} accesses the expression.

\code{value(q)} evaluates a quotation. If the quotation is
already \href{is_forced}{forced} then evaluation retreives the stored
value and has no other effect. \code{value()} does not change the
quotation to forced; repeated calls to \code{value} will have repeated
effects.
}
\description{
A quo (or quotation) \code{q <- quo( <anything> )} is an object with two
parts: an expression \link{expr(q)} with an environment \link{env(q)}. (Like
in writing, an 'expression' may be a phrase used in many different
contexts, but a 'quotation' needs to be bundled with a citation, to
reference a context in which it was said.)

quo_ is a normally evaluating, explicit constructor for quotations.
}
\details{
A quo is parallel to a 'promise' which is the data structure R uses
to hold lazily evaluated arguments. A quo is different from a promise
because it is an immutable data object.

As a data object, a quo does not automatically evaluate like a
promise, but can be evaluated explicitly with the method
\code{value(q)}.  A quo is immutable, so it does not mutate into a
"forced" state if you choose to evaluate it.

Quotation objects can be extracted from the arguments to a currently
evaluating function using \link{arg}.

A \link{dots} object is a list of quotations.
}
